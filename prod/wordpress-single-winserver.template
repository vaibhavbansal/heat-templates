description: |
  HEAT template for installing Wordpress on Windows Server

meta-data:
  template-version: 2013-05-23
  template-type: Application
  application-name: WordPress
  application-version: 3.6.1
  flavor: Single Linux server with WordPress 3.6.1 and MySQL 5.5
  flavor-weight: 3
  reach-info:
    option-groups:
    - application: WordPress Options
    - server: Server Options
    - database: Database Options
    tattoo: https://600861890ddb34a8670a-744765205721eed93c384dae790e86aa.ssl.cf2.rackcdn.com/wordpress-tattoo.png
    icon-20x20: https://600861890ddb34a8670a-744765205721eed93c384dae790e86aa.ssl.cf2.rackcdn.com/wordpress-icon-20x20.png
    rackspace-supported: true

documentation:
  abstract: |
    [WordPress](http://wordpress.org/about/) installed with
    [Apache](http://httpd.apache.org/),
    [vsftpd](https://security.appspot.com/vsftpd.html#about), [
    Varnish](https://www.varnish-cache.org/about), and
    [MySQL 5.5](http://www.mysql.com/about/).

    This deployment is intended for simple test cases and low
    traffic scenarios.  It is not for high traffic events and
    is not easily scalable.
  guide: |
    This blueprint includes a single server running Wordpress with Varnish.

    This blueprint's performance has not been measured.
  instructions: |
    #### Getting Started
    If you're new to WordPress, the
    [First Steps With WordPress](http://codex.wordpress.org/First_Steps_With_WordPress)
    documentation will step you through the process of logging into the
    admin panel, customizing your blog, and changing your theme.

    The [WordPress Lessons](http://codex.wordpress.org/WordPress_Lessons)
    cover a wide range of topics for users and designers.

    #### Accessing Your Deployment
    If you provided a domain name that is associated with your Rackspace
    Cloud account and chose to create DNS records, you should be able to
    navigate to the provided domain name in your browser. If DNS has not
    been configured yet, please refer to this
    [documentation](http://www.rackspace.com/knowledge_center/article/how-do-i-modify-my-hosts-file)
    on how to setup your hosts file to allow your browser to access your
    deployment via domain name. Please note: some applications like
    WordPress, Drupal, and Magento may not work properly unless accessed via
    domain name.

    #### Logging in via SSH
    The private key provided in the passwords section can be used to login
    as root via SSH.  We have an article on how to use these keys with
    [Mac OS X and Linux](http://www.rackspace.com/knowledge_center/article/logging-in-with-a-ssh-private-key-on-linuxmac)
    as well as [Windows using PuTTY](http://www.rackspace.com/knowledge_center/article/logging-in-with-a-ssh-private-key-on-windows).

    #### Details of Your Setup
    This deployment was stood up using
    [chef-solo](http://docs.opscode.com/chef_solo.html). Once the deployment
    is up, chef will not run again, so it is safe to modify configurations.

    A system user of 'wp_user' or the username you provided as a part of
    your deployment has been created with the same password as your
    WordPress user.  This user can be used to SCP, SFTP, or FTP content over
    to your site.  We recommend using SCP or any encrypted protocol.  Clear
    text protocols such as FTP could inadvertently expose your user
    credentials.

    WordPress itself was installed using [WP-CLI](http://wp-cli.org/).
    WordPress is installed in /var/www/vhosts/YOUR DOMAIN/ and served by
    [Apache](http://httpd.apache.org/).  The web site configuration is in
    /etc/apache2/sites-enabled.  The configuration file will be named using
    the domain name used as a part of this deployment (for example,
    domain.com.conf).

    In order to significantly improve performance, Apache has been moved to
    run on port 8080, and [Varnish](https://www.varnish-cache.org/) is
    listening on port 80.  Varnish will cache content served by WordPress,
    store it in memory, and then serve it from memory if any subsequent
    requests are made for the same content.  A special configuration file
    build for WordPress is in place.  The configuration can be found in
    /etc/varnish/include/.

    [Lsyncd](https://code.google.com/p/lsyncd/) has been in installed to sync
    static content across the front end servers.  All new content will be
    published to the master node and then synced across with lsync to the
    other web nodes.  When uploading content while migrating a site, you'll
    only need to upload the content to the master node.  The configuration
    for lsync can be found in /etc/lsyncd.

    [vsftpd](https://security.appspot.com/vsftpd.html) has been installed to
    allow you FTP access to the content of your site.  As mentioned earlier,
    you can use the WordPress username and password provided as the
    credentials for FTP.

    [MySQL](http://www.mysql.com/) is the database backend used in this
    deployment.  The MySQL root password is included in the password section
    of this deployment.  If you do lose the password, it is also available
    in /root/.my.cnf.  MySQL backups are performed locally by
    [Holland](http://wiki.hollandbackup.org/).  The backups will be stored
    in /var/lib/mysqlbackup.

    #### Updating WordPress
    If you'd like to update WordPress to the newest version, you can
    leverage the
    [One-click Update](http://codex.wordpress.org/Updating_WordPress#One-click_Update)
    now available through the web interface.  This is the simplest, most pain
    free way to upgrade your installation.  Keeping your installation up to
    date is important for maintaining site security.

    #### Migrating an Existing Site
    If you'd like to move your existing site to this deployment, there are
    plugins available such as
    [duplicator](http://wordpress.org/plugins/duplicator/) or
    [WP Migrate DB](http://wordpress.org/plugins/wp-migrate-db/) that can
    help ease the migration process.  This will give you a copy of the
    database that you can import into this deployment.  There are a number
    of other tools to help with this process.  Static content that is stored
    on the filesystem will need to be moved manually.

    #### Plugins
    There are over 23,000 plugins that have been created by an engaged
    developer community.  The
    [plugin directory](http://wordpress.org/extend/plugins/) provides an
    easy way to discover popular plugins that other users have found to be
    helpful. [Managing Plugins](https://codex.wordpress.org/Managing_Plugins)
    is important and you should be aware that some plugins decrease your
    site's performance so use them sparingly.

    #### Scaling out
    This single server deployment is not well suited to be scaled out.  We
    recommend leveraging a multi server option and using the WordPress
    migration tools to move your content if you need to grow your Cloud
    footprint.

parameters:

  server_hostname:
    type: String
    default: HeatWinResource
    description: Windows Server Name
    constraints:
    - length:
        min: 1
        max: 64
    - allowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
      description: must begin with a letter and contain only alphanumeric characters.
    display-hints:
      group: server
      order: 1
      label: Server Name
    
  image:
    type: String
    default: Windows Server 2012
    description: Windows Server Image
    display-hints:
      group: server
      order: 2
      label: Operating System
  
  flavor:
    type: String
    description: Rackspace Cloud Server flavor
    default: 4GB Standard Instance
    constraints:
    - allowed_values:
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: must be a valid Rackspace Cloud Server flavor.
    display-hints:
      group: server
      order: 3
      label: Server Size
  
  db_name:
    type: String
    default: wordpress
    description: The WordPress database name
    constraints:
    - length:
        min: 1
        max: 64
    - allowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
      description: must begin with a letter and contain only alphanumeric characters.
    display-hints:
      group: database
      order: 1
      label: Database Name
  
  db_password:
    type: String
    default: verybadpass_123
    description: Database password
    display-hints:
      group: database
      order: 2
      label: Database Password
    
  db_admin_password:
    type: String
    default: verybadpass_123
    description: Database Admin password
    display-hints:
      group: database
      order: 3
      label: Database Admin Password


resources:

  rs_windows_server:
    type: "Rackspace::Cloud::WinServer"
    properties:
      name: { get_param: server_hostname }
      flavor: { get_param: flavor }
      image: { get_param: image }
      user_data:
        str_replace:
          template: |
            $source = "http://download.microsoft.com/download/7/0/4/704CEB4C-9F42-4962-A2B0-5C84B0682C7A/WebPlatformInstaller_amd64_en-US.msi"
            $destination = "webpi.msi"
            $wc = New-Object System.Net.WebClient
            $wc.DownloadFile($source, $destination)
            Start-Process msiexec -ArgumentList "/i webpi.msi /qn"  -NoNewWindow -Wait
            echo DBPassword[@]%dbpassword% DBAdminPassword[@]%dbadminpassword% > test.app
            $tmpprofile = $env:userprofile
            $env:userprofile = "c:\users\administrator"
            $wpicmd = "C:\Program Files\Microsoft\Web Platform Installer\WebPICMD.exe"
            Start-Process $wpicmd -ArgumentList "/Install /Application:Wordpress@test.app /MySQLPassword:%dbadminpassword% /AcceptEULA /Log:.\wpi.log"  -NoNewWindow -Wait
            $env:userprofile = $tmpprofile
          params:
            "%dbpassword%": { get_param: db_password }
            "%dbadminpassword%": { get_param: db_admin_password }


outputs:

  public_ip:
    value: { get_attr: [ rs_windows_server, PublicIp ] }
    description: public IP of the windows server
  
  website_url:
    value:
      str_replace:
        template: http://%ip%/wordpress
        params:
          "%ip%": { get_attr: [ rs_windows_server, PublicIp ] }
    description: URL for Wordpress site
